rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for roles
    function hasRole(role) {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.roles.hasAny([role]);
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isGuard() {
      return hasRole('guard');
    }
    
    function isResident() {
      return hasRole('resident');
    }

    function isTitular() {
      return hasRole('titular_condo');
    }

    function isAnyAuthenticatedUser() {
        return request.auth != null;
    }

    // ROLES: Only admins can manage roles
    match /roles/{userId} {
      allow read, write: if isAdmin();
    }

    // VEHICLE REGISTRATIONS: Guards can create, Admins/Titulars can read
    match /vehicle_registrations/{docId} {
      allow create: if isGuard();
      allow read: if isAdmin() || isGuard() || isTitular();
      allow update, delete: if isAdmin() || isTitular();
    }

    // PEDESTRIAN REGISTRATIONS: Guards can create, Admins/Titulars can read
    match /pedestrian_registrations/{docId} {
      allow create: if isGuard();
      allow read: if isAdmin() || isGuard() || isTitular();
      allow update, delete: if isAdmin() || isTitular();
    }
    
    // LOGBOOK: Guards can create, Admins/Titulars can read
    match /logbook/{docId} {
        allow create: if isGuard();
        allow read: if isAdmin() || isGuard() || isTitular();
        allow update, delete: if isAdmin() || isTitular();
    }

    // PACKAGES: Guards can create, Admins/Titulars can read, Residents can read their own
    match /packages/{docId} {
        allow create: if isGuard();
        // Allow read for Admins, Guards, Titulars, and Residents (will need client-side filtering for residents)
        allow read: if isAnyAuthenticatedUser();
        allow update, delete: if isAdmin() || isTitular() || isGuard(); // Guards might need to update status
    }
    
    // RESIDENTS: Admins/Titulars can manage
    match /residents/{docId} {
        allow read, create, update, delete: if isAdmin() || isTitular();
    }

    // GUARDS: Admins/Titulars can manage
    match /guards/{docId} {
        allow read, create, update, delete: if isAdmin() || isTitular();
    }

    // COMMUNICATIONS: Admins/Titulars can manage, Residents can read
    match /communications/{docId} {
        allow create, update, delete: if isAdmin() || isTitular();
        allow read: if isAdmin() || isTitular() || isResident();
    }

    // SHIFTS: Guards can create/update their own shift, Admins/Titulars can read all
    match /shifts/{shiftId} {
        allow create: if isGuard() && request.resource.data.guardId == request.auth.uid;
        allow update: if isGuard() && get(/databases/$(database)/documents/shifts/$(shiftId)).data.guardId == request.auth.uid;
        allow read: if isAdmin() || isTitular() || (isGuard() && get(/databases/$(database)/documents/shifts/$(shiftId)).data.guardId == request.auth.uid);
    }
    
    // PROOF OF LIFE: Guards can create for their own shift, Admins/Titulars can read
    match /proof_of_life/{docId} {
      allow create: if isGuard() && request.resource.data.guardId == request.auth.uid;
      allow read: if isAdmin() || isTitular() || isGuard();
    }

    // VISITOR PASSES: Residents can create, Admins/Guards/Titulars can read
    match /visitor_passes/{passId} {
      allow create: if isResident() && request.resource.data.residentId == request.auth.uid;
      allow read: if isAnyAuthenticatedUser(); // QR code scanning might not be authenticated, but for now, any user can read.
      allow update, delete: if isAdmin() || isTitular();
    }
  }
}
