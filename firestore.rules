
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check user roles from their token claims
    function isSignedIn() {
      return request.auth != null;
    }

    function getRole() {
      return request.auth.token.roles[0];
    }
    
    function isAdmin() {
      return isSignedIn() && getRole() == 'admin';
    }

    function isGuard() {
      return isSignedIn() && getRole() == 'guard';
    }

    function isResident() {
        return isSignedIn() && (getRole() == 'resident' || getRole() == 'titular_condo');
    }
    
    // PENDING USERS: Only admins can read/write/delete.
    match /pending_users/{userId} {
      allow read, write, delete: if isAdmin();
    }
    
    // VEHICLE/PEDESTRIAN/LOGBOOK REGISTRATIONS: Only guards can create. Admins can read.
    match /vehicle_registrations/{docId} {
      allow create: if isGuard();
      allow read: if isAdmin() || isGuard();
      allow update, delete: if isAdmin(); // Only admins can modify/delete history
    }
    
    match /pedestrian_registrations/{docId} {
      allow create: if isGuard();
      allow read: if isAdmin() || isGuard();
      allow update, delete: if isAdmin();
    }
    
    match /logbook/{docId} {
      allow create: if isGuard();
      allow read: if isAdmin() || isGuard();
      allow update, delete: if isAdmin();
    }
    
    // PACKAGES: Guards can create. Admins and Residents can read.
    match /packages/{docId} {
      allow create: if isGuard();
      allow read: if isAdmin() || isGuard() || isResident();
      // In a real app, you would add logic for residents to only see their own packages:
      // allow read: if isAdmin() || isGuard() || (isResident() && resource.data.residentId == request.auth.uid);
      allow update, delete: if isAdmin();
    }
    
    // RESIDENTS & GUARDS: Only admins can manage.
    match /residents/{docId} {
      allow read, write, create, delete: if isAdmin();
    }
    
    match /guards/{docId} {
      allow read, write, create, delete: if isAdmin();
    }
    
    // COMMUNICATIONS: Admins create. All authenticated users can read.
    match /communications/{docId} {
        allow create: if isAdmin();
        allow read: if isSignedIn();
        allow update, delete: if isAdmin();
    }

    // SHIFTS: Guards create/update their own shifts. Admins can read.
    match /shifts/{shiftId} {
      allow create: if isGuard() && request.resource.data.guardId == request.auth.uid;
      allow update: if isGuard() && resource.data.guardId == request.auth.uid;
      allow read: if isAdmin() || (isGuard() && resource.data.guardId == request.auth.uid);
    }
    
    // PROOF OF LIFE: Guards create for their own shifts. Admins read.
    match /proof_of_life/{proofId} {
       allow create: if isGuard() && request.resource.data.guardId == request.auth.uid;
       allow read: if isAdmin();
    }
    
    // VISITOR PASSES: Residents create for themselves. Admins/Guards can read to validate.
    match /visitor_passes/{passId} {
      allow create: if isResident() && request.resource.data.residentId == request.auth.uid;
      allow read: if isAdmin() || isGuard() || (isResident() && resource.data.residentId == request.auth.uid);
    }
  }
}
